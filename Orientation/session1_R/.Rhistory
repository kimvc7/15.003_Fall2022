# You will likely come across a lot of datasets with NAs and they can cause headaches.
# In this example, we are grouping listings together if they have the same review score,
# and taking the median within the group. We also remove any NA values to get valid medians.
by.bedroom.rating <- listings %>%
filter(!is.na(review_scores_rating)) %>%
group_by(bedrooms, review_scores_rating) %>%
summarize(med.price = median(price), listings = n())
#### Creating a basic plot. ####
# Suppose we want to plot our bedroom rating data from earlier. How should we do that?
#' We must specify all three key elements here: our Data (`by.bedroom.rating`),
#' our Aesthetic mapping (`x` and `y` to columns of the data), and our desired Geometry (`geom_point`).
#' We glue everything together with `+` signs.
by.bedroom.rating %>%
ggplot(aes(x=review_scores_rating, y=med.price)) +
geom_point()
## Reminder: before, we would have done this using:
plot(by.bedroom.rating$review_scores_rating, by.bedroom.rating$med.price)
#' We can use the aesthetics to add a lot more detail to our charts. Suppose we want to see these points
#' broken out by the number of bedrooms. Let's color these points by the number of bedrooms by specifying
#' which variable to use to determine the color of each point.
by.bedroom.rating %>%
ggplot(aes(x=review_scores_rating, y=med.price, color=factor(bedrooms))) +
geom_point()
# We can also use geoms to layer additional plot types on top of each other.
# In the following example, we throw in a linear best-fit line for each bedroom class.
# Note that the same x, y, and color aesthetics propagate through all the geoms.
by.bedroom.rating %>%
ggplot(aes(x=review_scores_rating, y=med.price, color=factor(bedrooms))) +
geom_point() +
geom_smooth(method = lm)
# Let's save the summary of neighborhoods by prices so that we can plot it.
by.neighbor <- listings %>%
group_by(neighbourhood) %>%
summarize(med.price = median(price))
# We use `stat='identity'` to tell `geom_bar` that we want the height of the bar to be equal to the `y` value.
by.neighbor %>%
ggplot(aes(x=neighbourhood, y=med.price)) +
geom_bar(stat='identity') +
theme(axis.text.x=element_text(angle=60, hjust=1)) # This rotates the labels on the x-axis so we can read them
# We can make this better! Let's add some color and titles, and reorder the entries to be in descending price order.
by.neighbor %>%
ggplot(aes(x=reorder(neighbourhood, -med.price), y=med.price)) +
geom_bar(fill='dark blue', stat='identity') +
theme(axis.text.x=element_text(angle=60, hjust=1)) +
labs(x='', y='Median price', title='Median daily price by neighborhood')
listings %>%
group_by(bedrooms, bathrooms) %>%
summarize(med = median(price)) %>%
ggplot(aes(x=bedrooms, y=bathrooms, fill=med)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "steelblue") +
labs(x='Bedrooms', y='Bathrooms', fill='Median price', title = "Comparison of Price")
# Option 1 - Boxplots: A boxplot shows the 25th and 75th percentiles (top and bottom of the box),
# the 50th percentile or median (thick middle line), the max/min values (top/bottom vertical lines),
# and outliers (dots). We see that there are extreme outliers ($3000 per night!!). If we add in
# neighborhood information, we can see that the distributions are quite different
# (such as Back Bay which has a "heavy tail" of expensive properties)
listings %>%
filter(neighbourhood %in% c('South Boston Waterfront', 'Allston','Back Bay')) %>%
filter(price<  2000) %>%
ggplot(aes(x=factor(bedrooms), y=price)) +
facet_grid(.~neighbourhood) +
geom_boxplot()
# Option 2 - Cumulative Distribution (CDF) `stat_ecdf` plots the CDF of (i.e. percentiles vs. values) of vectors,
# which gives you a lot more information about the distribution at the expense of being a bit harder to read.
# Let's plot the distribution of price by number of bedrooms, and use `coord_cartesian` to limit the x-axis range.
listings %>%
ggplot(aes(price, color=factor(bedrooms))) +
stat_ecdf() +
coord_cartesian(xlim = c(0, 1000))
# 1. How can I figure out the syntax or operations of a function?
# Suppose that you would like to figure out how to take the log base 10.
# You can directly use the help function:
help(log)
# Or you can just use the question mark before the function you are interested in
?log
# Look at the "Arguments" section to look at what kind of inputs the function takes.
# The "Details" section describes also the operations of the function.
# "Examples" will actually show you how to apply it.
# Another option is to just Google it!!
# How do we get then the log base 10?
log10(10)
#Here is an example:
log("Maria")
log(a)
# Object a is not found because it was not defined.
a = 10
log(a)
library(tidyverse)
## First, we'll load the data and get caught up to where we left off in Session 1
raw_listings <- read.csv('data/listings_clean.csv', stringsAsFactors=TRUE)
listings <- raw_listings %>%
filter(!is.na(bedrooms), !is.na(bathrooms)) %>%
mutate(price = as.numeric(gsub('[$,]', '', price)), # we are now replacing the price column, not creating a new one
cleaning_fee = as.numeric(gsub('[$,]', '', cleaning_fee)))
listings %>% select(name, review_scores_rating, reviews_per_month) %>% head()
# OPTION 1: Only include complete cases (i.e. no NAs in the row) # Warning: you are going to lose data!
listings_cc <- listings %>%
filter(complete.cases(.))
listings_cc %>% select(name, review_scores_rating, reviews_per_month) %>% head()
# OPTION 2a: You can impute the values using median/mode value for each column
# Median/Mode Imputation is easy using a function in randomForest.
# Imputes median for numerical columns, and mode for categorical columns
library(randomForest)
listings_imputeMedian <- na.roughfix(listings)
listings_imputeMedian %>% select(name, review_scores_rating, reviews_per_month) %>% head()
listings$reviews_per_month[is.na(listings$reviews_per_month)] = 0
# OPTION 2b: You can also impute the mean, but you can only do this for numerical columns.
# Let's try it on the review_scores_rating column
listings_imputeMean <- listings
listings_imputeMean$review_scores_rating[is.na(listings_imputeMean$review_scores_rating)] <- mean(listings_imputeMean$review_scores_rating, na.rm = TRUE)
listings_imputeMean %>% select(review_scores_rating, reviews_per_month) %>% head()
install.packages("mice")
library(mice)
## We will run a very small example for the sake of time.
listings_small <- listings %>%
select(bedrooms, bathrooms, price, cleaning_fee, review_scores_rating, reviews_per_month) %>%
head(50)
temp_imputed <- mice(listings_small, m=5, maxit = 10, method = 'pmm', seed = 500)
# You can get the full imputed dataset using the complete() function.
listings_imputeMICE <- complete(temp_imputed)
listings_imputeMICE %>% head()
# Once a package is installed, you still need to load it in each session (but you do not need to re-install it):
library(tidyverse)
setwd("~/Desktop/15.003_Fall2022/Orientation/session1_R")
# Next, load in the rental data (check your working directory!)
# setwd("~/git/mban22_software_tools/session1_R")
raw_listings <- read.csv('data/listings_clean.csv')
View(raw_listings)
View(raw_listings)
View(raw_listings)
# Our traditional data viewing methods don't work well here--there are too many features and observations
str(raw_listings)
# Our traditional data viewing methods don't work well here--there are too many features and observations
str(raw_listings)
head(raw_listings)
head(raw_listings$price)
head(select(raw_listings, price,bedrooms))
raw_listings$price
## Let's start by figuring out how to convert the prices to numbers. What do the prices look like?
example = raw_listings$price[1:5] # choose a small set of values to work with to see how this works
example
gsub('[$,]', '', example) # gsub lets us  remove the $ and ,: we replace these both with '' (e.g. nothing)
as.numeric(gsub('[$,]', '', example)) # now that the rows "look like" numbers, we can convert them to numbers
gsub('$', '', example)
gsub('[$]', '', example)
## Now we can put this all together to create a new column in the listings column!
raw_listings %>%
mutate(price_numeric = as.numeric(gsub('[$,]', '', price))) %>%
select(name, price, price_numeric) %>%
head()
#### COUNT function ####
#' The count() function gives us the count/length of a column.
#' Here we find how many listings there are with non-NA bedrooms files.
raw_listings %>% count(is.na(bedrooms))
count(raw_listings,  is.na(bedrooms))
# we can also look at the count of all bedrooms!
raw_listings %>% count(bedrooms)
#### FILTER function ####
#' The filter() function lets us filter to a subset of rows. We filter on conditions, just like with
#' the subset() function that we have used in the past.
#' Tip: You can filter using the `%in%` keyword to restrict to row values contained in a set.
## ------------------------------------------------------------------------
raw_listings %>% select(name, neighbourhood, price, bedrooms) %>%
filter(bedrooms==4) %>% head()
## We could have done the same thing in base R:
head(subset(raw_listings[c("name","neighbourhood","price","bedrooms")], bedrooms == 4))
## Let's try using the %in% operator
## first, what are the unique neighborhoods?
unique(raw_listings$neighbourhood)
## we can restrict our data to look at a subset of this
raw_listings %>% select(name, neighbourhood, price, bedrooms) %>%
filter(neighbourhood %in% c('Downtown', 'Back Bay', 'Chinatown'))
raw_listings %>% filter(accommodates %in% c(2,4,7) & bedrooms >= 2) %>%
select(id, neighbourhood, accommodates, bedrooms)
listings <- raw_listings %>%
filter(!is.na(bedrooms), !is.na(bathrooms)) %>%
mutate(price = as.numeric(gsub('[$,]', '', price)), # we are now replacing the price column, not creating a new one
cleaning_fee = as.numeric(gsub('[$,]', '', cleaning_fee)))
View(listings)
View(listings)
head(listings)
##### ARRANGE function #####
## The arrange() function lets us sort the data by a chosen column (or sets of columns)
## We can also sort this information by price using the arrange function.
## If you want to sort in descending order, wrap the column name in desc()
listings %>%
select(name, bedrooms, price) %>%
arrange(desc(price),desc(bedrooms)) %>%
head()
##### SUMMARISE function (for aggregation) #####
#' Now, how about a summary statistic, like the average price for a listing?
#' Let's take our clean dataset and `summarize` it to find out.
listings %>% summarise(avg.price = mean(price))
#### GROUP_BY function ####
#' We can also run summary statistics by group, like a pivot table,
#' We first `group_by` a given variable, and then we summarize within each of the groups.
#' This is similar to creating a pivot table in Excel.
listings %>%
group_by(neighbourhood) %>%
summarize(avg.price = mean(price),
median.price = median(price))
listings %>%
group_by(property_type) %>%
summarize(avg.price = mean(price),
avg.accommodates = mean(accommodates)) %>%
arrange(desc(avg.accommodates))
## Suppose we want to add in the median neighborhood price for each listing. We could do this as follows:
neighborhood_stats <- listings %>%
group_by(neighbourhood) %>%
summarise(median_price = median(price))
neighborhood_stats
inner_join(listings, neighborhood_stats, by = 'neighbourhood') %>%
select(name, neighbourhood, price, median_price)
## --------------------------------------------------------------------
################# Part 2: dplyr Analysis Examples ####################
## --------------------------------------------------------------------
#' Example 1: examining trends by neighborhood.
#' Suppose we're a little worried these averages are skewed by a few outlier listings.
#' Let's compare the average price, median price, and count of listings in each neighborhood.
#' The `n()` function here just gives a count of how many rows we have in each group.
#' Notice that we can summarize multiple features at once using summarize().
listings %>%
group_by(neighbourhood) %>%
summarize(avg.price = mean(price),
med.price = median(price),
num = n())
listings %>%
group_by(neighbourhood) %>%
summarize(avg.price = mean(price),
med.price = median(price),
num = n()) %>%
filter(num > 200)
# Example 2: ratings summarized by the number of bedrooms
# What's new here? we are filtering out NA values.
# You will likely come across a lot of datasets with NAs and they can cause headaches.
# In this example, we are grouping listings together if they have the same review score,
# and taking the median within the group. We also remove any NA values to get valid medians.
by.bedroom.rating <- listings %>%
filter(!is.na(review_scores_rating)) %>%
group_by(bedrooms, review_scores_rating) %>%
summarize(med.price = median(price), listings = n())
by.bedroom.rating$review_scores_rating
#### Creating a basic plot. ####
# Suppose we want to plot our bedroom rating data from earlier. How should we do that?
#' We must specify all three key elements here: our Data (`by.bedroom.rating`),
#' our Aesthetic mapping (`x` and `y` to columns of the data), and our desired Geometry (`geom_point`).
#' We glue everything together with `+` signs.
by.bedroom.rating %>%
ggplot(aes(x=review_scores_rating, y=med.price)) +
geom_point()
## Reminder: before, we would have done this using:
plot(by.bedroom.rating$review_scores_rating, by.bedroom.rating$med.price)
#' We can use the aesthetics to add a lot more detail to our charts. Suppose we want to see these points
#' broken out by the number of bedrooms. Let's color these points by the number of bedrooms by specifying
#' which variable to use to determine the color of each point.
by.bedroom.rating %>%
ggplot(aes(x=review_scores_rating, y=med.price, color=factor(bedrooms))) +
geom_point()
# We can also use geoms to layer additional plot types on top of each other.
# In the following example, we throw in a linear best-fit line for each bedroom class.
# Note that the same x, y, and color aesthetics propagate through all the geoms.
by.bedroom.rating %>%
ggplot(aes(x=review_scores_rating, y=med.price, color=factor(bedrooms))) +
geom_point() +
geom_smooth(method = lm)
# Let's save the summary of neighborhoods by prices so that we can plot it.
by.neighbor <- listings %>%
group_by(neighbourhood) %>%
summarize(med.price = median(price))
# Let's save the summary of neighborhoods by prices so that we can plot it.
by.neighbor <- listings %>%
group_by(neighbourhood) %>%
summarize(med.price = median(price))
# We use `stat='identity'` to tell `geom_bar` that we want the height of the bar to be equal to the `y` value.
by.neighbor %>%
ggplot(aes(x=neighbourhood, y=med.price)) +
geom_bar(stat='identity') +
theme(axis.text.x=element_text(angle=60, hjust=1)) # This rotates the labels on the x-axis so we can read them
# We can make this better! Let's add some color and titles, and reorder the entries to be in descending price order.
by.neighbor %>%
ggplot(aes(x=reorder(neighbourhood, -med.price), y=med.price)) +
geom_bar(fill='dark blue', stat='identity') +
theme(axis.text.x=element_text(angle=60, hjust=1)) +
labs(x='', y='Median price', title='Median daily price by neighborhood')
listings %>%
group_by(bedrooms, bathrooms) %>%
summarize(med = median(price)) %>%
ggplot(aes(x=bedrooms, y=bathrooms, fill=med)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "steelblue") +
labs(x='Bedrooms', y='Bathrooms', fill='Median price', title = "Comparison of Price")
# Option 1 - Boxplots: A boxplot shows the 25th and 75th percentiles (top and bottom of the box),
# the 50th percentile or median (thick middle line), the max/min values (top/bottom vertical lines),
# and outliers (dots). We see that there are extreme outliers ($3000 per night!!). If we add in
# neighborhood information, we can see that the distributions are quite different
# (such as Back Bay which has a "heavy tail" of expensive properties)
listings %>%
filter(neighbourhood %in% c('South Boston Waterfront', 'Allston','Back Bay')) %>%
filter(price<  2000) %>%
ggplot(aes(x=factor(bedrooms), y=price)) +
facet_grid(.~neighbourhood) +
geom_boxplot()
# Option 2 - Cumulative Distribution (CDF) `stat_ecdf` plots the CDF of (i.e. percentiles vs. values) of vectors,
# which gives you a lot more information about the distribution at the expense of being a bit harder to read.
# Let's plot the distribution of price by number of bedrooms, and use `coord_cartesian` to limit the x-axis range.
listings %>%
ggplot(aes(price, color=factor(bedrooms))) +
stat_ecdf() +
coord_cartesian(xlim = c(0, 1000))
# Option 1 - Boxplots: A boxplot shows the 25th and 75th percentiles (top and bottom of the box),
# the 50th percentile or median (thick middle line), the max/min values (top/bottom vertical lines),
# and outliers (dots). We see that there are extreme outliers ($3000 per night!!). If we add in
# neighborhood information, we can see that the distributions are quite different
# (such as Back Bay which has a "heavy tail" of expensive properties)
listings %>%
filter(neighbourhood %in% c('South Boston Waterfront', 'Allston','Back Bay')) %>%
filter(price<  2000) %>%
ggplot(aes(x=factor(bedrooms), y=price)) +
facet_grid(.~neighbourhood) +
geom_boxplot()
?facet_grid
# Option 2 - Cumulative Distribution (CDF) `stat_ecdf` plots the CDF of (i.e. percentiles vs. values) of vectors,
# which gives you a lot more information about the distribution at the expense of being a bit harder to read.
# Let's plot the distribution of price by number of bedrooms, and use `coord_cartesian` to limit the x-axis range.
listings %>%
ggplot(aes(price, color=factor(bedrooms))) +
stat_ecdf() +
coord_cartesian(xlim = c(0, 1000))
# Option 2 - Cumulative Distribution (CDF) `stat_ecdf` plots the CDF of (i.e. percentiles vs. values) of vectors,
# which gives you a lot more information about the distribution at the expense of being a bit harder to read.
# Let's plot the distribution of price by number of bedrooms, and use `coord_cartesian` to limit the x-axis range.
listings %>%
ggplot(aes(price, color=factor(bedrooms))) +
stat_ecdf() +
coord_cartesian(xlim = c(0, 3000))
# Option 2 - Cumulative Distribution (CDF) `stat_ecdf` plots the CDF of (i.e. percentiles vs. values) of vectors,
# which gives you a lot more information about the distribution at the expense of being a bit harder to read.
# Let's plot the distribution of price by number of bedrooms, and use `coord_cartesian` to limit the x-axis range.
listings %>%
ggplot(aes(price, color=factor(bedrooms))) +
stat_ecdf() +
coord_cartesian(xlim = c(0, 1000))
# 1. How can I figure out the syntax or operations of a function?
# Suppose that you would like to figure out how to take the log base 10.
# You can directly use the help function:
help(log)
# Or you can just use the question mark before the function you are interested in
?log
# Look at the "Arguments" section to look at what kind of inputs the function takes.
# The "Details" section describes also the operations of the function.
# "Examples" will actually show you how to apply it.
# Another option is to just Google it!!
# How do we get then the log base 10?
log10(10)
#Here is an example:
log("Maria")
# Object a is not found because it was not defined.
a = 10
log(a)
library(tidyverse)
## First, we'll load the data and get caught up to where we left off in Session 1
raw_listings <- read.csv('data/listings_clean.csv', stringsAsFactors=TRUE)
listings <- raw_listings %>%
filter(!is.na(bedrooms), !is.na(bathrooms)) %>%
mutate(price = as.numeric(gsub('[$,]', '', price)), # we are now replacing the price column, not creating a new one
cleaning_fee = as.numeric(gsub('[$,]', '', cleaning_fee)))
listings %>% select(name, review_scores_rating, reviews_per_month) %>% head()
# OPTION 1: Only include complete cases (i.e. no NAs in the row) # Warning: you are going to lose data!
listings_cc <- listings %>%
filter(complete.cases(.))
listings_cc %>% select(name, review_scores_rating, reviews_per_month) %>% head()
# OPTION 2a: You can impute the values using median/mode value for each column
# Median/Mode Imputation is easy using a function in randomForest.
# Imputes median for numerical columns, and mode for categorical columns
library(randomForest)
listings_imputeMedian <- na.roughfix(listings)
listings_imputeMedian %>% select(name, review_scores_rating, reviews_per_month) %>% head()
# OPTION 2b: You can also impute the mean, but you can only do this for numerical columns.
# Let's try it on the review_scores_rating column
listings_imputeMean <- listings
listings_imputeMean$review_scores_rating[is.na(listings_imputeMean$review_scores_rating)] <- mean(listings_imputeMean$review_scores_rating, na.rm = TRUE)
listings_imputeMean %>% select(review_scores_rating, reviews_per_month) %>% head()
library(mice)
## We will run a very small example for the sake of time.
listings_small <- listings %>%
select(bedrooms, bathrooms, price, cleaning_fee, review_scores_rating, reviews_per_month) %>%
head(50)
temp_imputed <- mice(listings_small, m=5, maxit = 10, method = 'pmm', seed = 500)
# You can get the full imputed dataset using the complete() function.
listings_imputeMICE <- complete(temp_imputed)
listings_imputeMICE %>% head()
facet_grid
# Option 1 - Boxplots: A boxplot shows the 25th and 75th percentiles (top and bottom of the box),
# the 50th percentile or median (thick middle line), the max/min values (top/bottom vertical lines),
# and outliers (dots). We see that there are extreme outliers ($3000 per night!!). If we add in
# neighborhood information, we can see that the distributions are quite different
# (such as Back Bay which has a "heavy tail" of expensive properties)
listings %>%
filter(neighbourhood %in% c('South Boston Waterfront', 'Allston','Back Bay')) %>%
filter(price<  2000) %>%
ggplot(aes(x=factor(bedrooms), y=price)) +
facet_grid(.~neighbourhood) +
geom_boxplot()
.~neighbourhood
# Option 1 - Boxplots: A boxplot shows the 25th and 75th percentiles (top and bottom of the box),
# the 50th percentile or median (thick middle line), the max/min values (top/bottom vertical lines),
# and outliers (dots). We see that there are extreme outliers ($3000 per night!!). If we add in
# neighborhood information, we can see that the distributions are quite different
# (such as Back Bay which has a "heavy tail" of expensive properties)
listings %>%
filter(neighbourhood %in% c('South Boston Waterfront', 'Allston','Back Bay')) %>%
filter(price<  2000) %>%
ggplot(aes(x=factor(bedrooms), y=price)) +
#facet_grid(.~neighbourhood) +
geom_boxplot()
# Option 1 - Boxplots: A boxplot shows the 25th and 75th percentiles (top and bottom of the box),
# the 50th percentile or median (thick middle line), the max/min values (top/bottom vertical lines),
# and outliers (dots). We see that there are extreme outliers ($3000 per night!!). If we add in
# neighborhood information, we can see that the distributions are quite different
# (such as Back Bay which has a "heavy tail" of expensive properties)
listings %>%
filter(neighbourhood %in% c('South Boston Waterfront', 'Allston','Back Bay')) %>%
filter(price<  2000) %>%
ggplot(aes(x=factor(bedrooms), y=price)) +
facet_grid(.~neighbourhood) +
geom_boxplot()
# Option 1 - Boxplots: A boxplot shows the 25th and 75th percentiles (top and bottom of the box),
# the 50th percentile or median (thick middle line), the max/min values (top/bottom vertical lines),
# and outliers (dots). We see that there are extreme outliers ($3000 per night!!). If we add in
# neighborhood information, we can see that the distributions are quite different
# (such as Back Bay which has a "heavy tail" of expensive properties)
listings %>%
filter(neighbourhood %in% c('South Boston Waterfront', 'Allston','Back Bay')) %>%
filter(price<  2000) %>%
ggplot(aes(x=factor(bedrooms), y=price)) +
#facet_grid(.~neighbourhood) +
geom_boxplot()
# Option 1 - Boxplots: A boxplot shows the 25th and 75th percentiles (top and bottom of the box),
# the 50th percentile or median (thick middle line), the max/min values (top/bottom vertical lines),
# and outliers (dots). We see that there are extreme outliers ($3000 per night!!). If we add in
# neighborhood information, we can see that the distributions are quite different
# (such as Back Bay which has a "heavy tail" of expensive properties)
listings %>%
filter(neighbourhood %in% c('South Boston Waterfront', 'Allston','Back Bay')) %>%
filter(price<  2000) %>%
ggplot(aes(x=factor(bedrooms), y=price)) +
facet_grid(.~neighbourhood) +
geom_boxplot()
temp_imputed <- mice(listings_small, m=5, maxit = 10, method = 'pmm', seed = 500)
# You can get the full imputed dataset using the complete() function.
listings_imputeMICE <- complete(temp_imputed)
listings_imputeMICE
install.packages('tidyverse')
install.packages('tidyverse')
install.packages("tidyverse")
library(ROCR)
install.packages("ROCR")
library(rpart)
library(rpart.plot)
install.packages("rpRT")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart.plot")
library(RColorBrewer)
library(leaflet)
install.packages("leaflet")
library(caret)
library(e1071)
install.packages("caret")
library(caret)
listings_raw = read.csv("listings.csv",stringsAsFactors=FALSE)
str(listings_raw)
source("process_listings.R")
all_listings <- process_listings("listings.csv")
listings <- all_listings %>%
select(price, accommodates, review_scores_rating, property_type, neighbourhood_cleansed, room_type)
head(listings)
names(listings)
ols_model <- lm(price ~ accommodates, data = listings)
names(ols_model)
summary(ols_model)
library(modelr)
library(tidyverse)
library(caTools)
library(randomForest)
library(ROCR)
library(rpart)
library(rpart.plot)
library(RColorBrewer)
library(leaflet)
library(caret)
library(e1071)
listings_raw = read.csv("listings.csv",stringsAsFactors=FALSE)
str(listings_raw)
listings_raw = read.csv("listings.csv",stringsAsFactors=FALSE)
library(modelr)
library(tidyverse)
library(caTools)
library(randomForest)
library(ROCR)
library(rpart)
library(rpart.plot)
library(RColorBrewer)
library(leaflet)
library(caret)
library(e1071)
listings_raw = read.csv("listings.csv",stringsAsFactors=FALSE)
str(listings_raw)
listings_raw = read.csv("listings.csv",stringsAsFactors=FALSE)
listings_raw = read.csv("listings.csv",stringsAsFactors=FALSE)
listings_raw = read.csv("listings.csv", stringsAsFactors=FALSE)
