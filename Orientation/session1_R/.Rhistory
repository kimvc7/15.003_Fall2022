# First, load in the rental data (check your working directory!)
setwd("~/git/mban_software_tools/session1_R/data")
# First, load in the rental data (check your working directory!)
setwd("~/git/mban22_software_tools/session1_R")
raw_listings <- read.csv('data/listings_clean.csv')
# How can I save a dataset that I was working on?
df_summary <- summary(df)
# 6. How can I import a dataset?
# Option 1: directly through a command
df = read.csv("data/listings_clean.csv")
summary(df)
# How can I save a dataset that I was working on?
df_summary <- summary(df)
describe(df)
write.csv(df_summary, "test_write.csv")
# How can I save a dataset that I was working on?
write.csv(df, "test_write.csv")
# How can I save a dataset that I was working on?
df_subset = df[1:10,:]
# How can I save a dataset that I was working on?
df_subset = df[1:10,]
# How can I save a dataset that I was working on?
df_subset <- df[1:10,]
write.csv(df_subset, "test_write.csv")
write.csv(df_subset, "test_write.csv", row.names = FALSE)
# 8. How can I clear my working environment?
# Option 1: directly through a commad
rm(list=ls())
# 6. How can I import a dataset?
# Option 1: directly through a command
df = read.csv("data/wine.csv")
# Look at the structure of the data:
str(wine)
# Look at a statistical summary of the data:
summary(wine)
# Look at the structure of the data:
str(df)
# Look at a statistical summary of the data:
summary(df)
# To access a variable in a data frame, you link it to the data frame with the dollar sign.
df$Year
df$WinterRain
# Compute the mean:
df(wine$WinterRain)
# We could also pull a single summary:
summary(df$WinterRain)
# In one year, there was only 376 mm of winter rain - which year?
which.min(wine$Price)
# In one year, there was only 376 mm of winter rain - which year?
which.min(df$Price)
df$Year[19]
# You can also do this in one step:
df$Year[which.min(df$Price)]
library(tidyverse)
setwd("~/git/mban22_software_tools/session1_R")
raw_listings <- read.csv('data/listings_clean.csv')
listings <- raw_listings %>%
filter(!is.na(bedrooms), !is.na(bathrooms)) %>%
mutate(price = as.numeric(gsub('[$,]', '', price)), # we are now replacing the price column, not creating a new one
cleaning_fee = as.numeric(gsub('[$,]', '', cleaning_fee)))
# Let's start with some basic functions:
#You can do many mathematical calculations by simply typing the commands
3+5
2^3
abs(-5)
sqrt(2)
log(10)
# R has two equivalent ways of assigning variables, "=" and "<-"
x=5
x <- 5
# Many R functions take vectors as arguments.
# Let's see how to construct a vector (collection of data)
# Here is an example of a vector of numbers
numbers = c(10, 10, 20, 30, 50)
# To find out what is the type of any given vector you can use the following command
typeof(x)
#Here is another example
name <- c("Maria", "Fred", "Sakura")
typeof(name)
#We can also find out how big is the vector in hand
length(numbers)
# We can also access the individual numbers via their index
numbers[1]
numbers[5]
numbers[6]
# R has two equivalent ways of assigning variables, "=" and "<-"
x=5
x <- 5
# Many R functions take vectors as arguments.
# Let's see how to construct a vector (collection of data)
# Here is an example of a vector of numbers
numbers = c(10, 10, 20, 30, 50)
# To find out what is the type of any given vector you can use the following command
typeof(x)
#Here is another example
name <- c("Maria", "Fred", "Sakura")
typeof(name)
#We can also find out how big is the vector in hand
length(numbers)
# We can also access the individual numbers via their index
numbers[1]
numbers[5]
numbers[6]
# The following creates a vector of 10 ones. "Repeat 1, 10 times"
rep(1, 10)
# The following creates a vector with the numbers 1 through 50, in order "Sequence from 1 to 50"
seq(1, 50)
# Basic boolean statements
a = 2
a == 4 # checks if a is equal to 5
a <= 5 # checks if a is less than or equal to 5 ## don't confuse with "<-"
a != 4 # checks if a is NOT equal to 4
# 6. How can I import a dataset?
# Option 1: directly through a command
df = read.csv("data/wine.csv")
# Look at the structure of the data:
str(df)
# Look at a statistical summary of the data:
summary(df)
# To access a variable in a data frame, you link it to the data frame with the dollar sign.
df$Year
df$WinterRain
# Let's get some basic statistics about the rainfall
# Try applying sum(), median(), mean(), sd(), max(), min() to the data
sum(df$WinterRain)
median(df$WinterRain)
mean(df$WinterRain)
sd(df$WinterRain)
max(df$WinterRain)
min(df$WinterRain)
# We could also pull a statistical summary:
summary(df$WinterRain)
# In one year, there was only 376 mm of winter rain - which year?
which.min(df$Price)
df$Year[19]
# You can also do this in one step:
df$Year[which.min(df$Price)]
# Sorted vector of WinterRain (default: ascending order)
sort(df$WinterRain)
#Suppose that you would like to sort them in a decreasing order, look for the help function and see how that can be done
?sort
sort(df$WinterRain, decreasing = TRUE)
# How can I save a dataset that I was working on?
df_subset <- df[1:10,]
write.csv(df_subset, "test_write.csv", row.names = FALSE)
# How can I clear my working environment?
# Option 1: directly through a commad
rm(list=ls())
# Option 2: Through a menu
